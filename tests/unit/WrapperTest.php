<?php
/**
 * Created by PhpStorm.
 * User: execut
 * Date: 10/5/16
 * Time: 4:27 PM
 */

namespace execut\multiprocess;


use execut\TestCase;
use yii\mutex\FileMutex;

class WrapperTest extends TestCase
{
    protected $calledCount = null;
    protected $calledKeys = [];
    protected $calledValues = [];
    /**
     * @var FileMutex
     */
    protected $mutex = null;

    public function setUp():void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown():void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        if (file_exists('/tmp/test_test1')) {
            unlink('/tmp/test_test1');
        }

        if (file_exists('/tmp/test_test2')) {
            unlink('/tmp/test_test2');
        }
    }

    public function testRun() {
        $this->calledCount = 0;
        $this->calledKeys = [];
        $this->calledValues = [];
        $callback = function ($value, $key) {
            $this->calledCount++;
            $this->calledValues[] = $value;
            $this->calledKeys[] = $key;
        };

        $keys = ['test1', 'test2'];
        $wrapper = new Wrapper([
            'callback' => $callback,
            'data' => $keys,
            'threadsCount' => 1,
        ]);
        $wrapper->run();
        $this->assertEquals(2, $this->calledCount);
        $this->assertEquals($keys, $this->calledValues);
        $this->assertEquals(array_keys($keys), $this->calledKeys);
    }


    public function testRunWithMultithread() {
        $callback = function ($value, $key, $pid = false) {
            if ($pid !== false) {
                file_put_contents('/tmp/test_' . $value, 1);
            }
        };

        $keys = ['test1', 'test2'];
        $wrapper = new Wrapper([
            'callback' => $callback,
            'data' => $keys,
            'threadsCount' => 2,
        ]);
        $wrapper->run();
        $this->assertFileExists('/tmp/test_test1');
        $this->assertFileExists('/tmp/test_test2');
    }
}